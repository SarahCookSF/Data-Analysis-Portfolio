-- creates a functional tic-tac-toe game between two players (or play yourself)

-- create a 3x4 table that represents a 3x3 tic tac toe board with column for row labels
DROP TABLE IF EXISTS tic_tac_toe_board;

CREATE TABLE tic_tac_toe_board(
    row_num INT NOT NULL,
    col_1 VARCHAR(1) NULL,
    col_2 VARCHAR(1) NULL,
    col_3 VARCHAR(1) NULL);

-- set initial board values to NULL ("-" is counted as a value which makes checking for win conditions more complicated)
INSERT INTO tic_tac_toe_board VALUES
(1, NULL, NULL, NULL),
(2, NULL, NULL, NULL),
(3, NULL, NULL, NULL);

-- creating a user-defined variable that stores whether it is player X's turn or player O's turn. Player X goes first so initialize it to 'X'
SET @player_turn = 'X';

-- creating a stored procedure that checks whether anyone has gotten 3 in a row, if the game ends in a tie, or whether the game is still going
DROP PROCEDURE IF EXISTS game_complete;

DELIMITER //

CREATE PROCEDURE game_complete()
BEGIN
    DECLARE game_over BOOLEAN DEFAULT FALSE;

    -- use user-defined variables to store a snapshot of the value at each position 
    SET @r1c1 = (SELECT col_1 FROM tic_tac_toe_board WHERE row_num = 1);
    SET @r1c2 = (SELECT col_2 FROM tic_tac_toe_board WHERE row_num = 1);
    SET @r1c3 = (SELECT col_3 FROM tic_tac_toe_board WHERE row_num = 1);
    SET @r2c1 = (SELECT col_1 FROM tic_tac_toe_board WHERE row_num = 2);
    SET @r2c2 = (SELECT col_2 FROM tic_tac_toe_board WHERE row_num = 2);
    SET @r2c3 = (SELECT col_3 FROM tic_tac_toe_board WHERE row_num = 2);
    SET @r3c1 = (SELECT col_1 FROM tic_tac_toe_board WHERE row_num = 3);
    SET @r3c2 = (SELECT col_2 FROM tic_tac_toe_board WHERE row_num = 3);
    SET @r3c3 = (SELECT col_3 FROM tic_tac_toe_board WHERE row_num = 3);

    -- check for row wins
    IF @r1c1 = @r1c2 AND @r1c2 = @r1c3 AND @r1c1 IS NOT NULL THEN 
        SELECT *, CONCAT('Player ', @r1c1, ' wins!') AS Result FROM tic_tac_toe_board;
        SET game_over = TRUE;
    ELSEIF @r2c1 = @r2c2 AND @r2c2 = @r2c3 AND @r2c1 IS NOT NULL THEN 
        SELECT *, CONCAT('Player ', @r2c1, ' wins!') AS Result FROM tic_tac_toe_board;
        SET game_over = TRUE;
    ELSEIF @r3c1 = @r3c2 AND @r3c2 = @r3c3 AND @r3c1 IS NOT NULL THEN 
        SELECT *, CONCAT('Player ', @r3c1, ' wins!') AS Result FROM tic_tac_toe_board;
        SET game_over = TRUE;
    END IF;

    -- check for column wins
    IF @r1c1 = @r2c1 AND @r2c1 = @r3c1 AND @r1c1 IS NOT NULL THEN 
        SELECT *, CONCAT('Player ', @r1c1, ' wins!') AS Result FROM tic_tac_toe_board;
        SET game_over = TRUE;
    ELSEIF @r1c2 = @r2c2 AND @r2c2 = @r3c2 AND @r1c2 IS NOT NULL THEN 
        SELECT *, CONCAT('Player ', @r1c2, ' wins!') AS Result FROM tic_tac_toe_board;
        SET game_over = TRUE;
    ELSEIF @r1c3 = @r2c3 AND @r2c3 = @r3c3 AND @r1c3 IS NOT NULL THEN 
        SELECT *, CONCAT('Player ', @r1c3, ' wins!') AS Result FROM tic_tac_toe_board;
        SET game_over = TRUE;
    END IF;

    -- check for diagonal wins
    IF @r1c1 = @r2c2 AND @r2c2 = @r3c3 AND @r1c1 IS NOT NULL THEN 
        SELECT *, CONCAT('Player ', @r1c1, ' wins!') AS Result FROM tic_tac_toe_board;
        SET game_over = TRUE;
    ELSEIF @r1c3 = @r2c2 AND @r2c2 = @r3c1 AND @r1c3 IS NOT NULL THEN 
        SELECT *, CONCAT('Player ', @r1c3, ' wins!') AS Result FROM tic_tac_toe_board;
        SET game_over = TRUE;
    END IF;

    -- check for tie
    IF 
        @r1c1 IS NOT NULL AND 
        @r1c2 IS NOT NULL AND 
        @r1c3 IS NOT NULL AND
        @r2c1 IS NOT NULL AND 
        @r2c2 IS NOT NULL AND
        @r2c3 IS NOT NULL AND
        @r3c1 IS NOT NULL AND
        @r3c2 IS NOT NULL AND
        @r3c3 IS NOT NULL THEN
        SELECT *, 'Tie game' AS Result FROM tic_tac_toe_board;
        SET game_over = TRUE;
    END IF;

    -- If no winner or tie has been found, return whose turn it is
    IF NOT game_over THEN
        SELECT *, CONCAT('It''s ', @player_turn, '''s turn!') AS Result FROM tic_tac_toe_board;
    END IF;
END //

DELIMITER ;

-- create a procedure that simulates a player move
DROP PROCEDURE IF EXISTS player_move;

DELIMITER //

CREATE PROCEDURE player_move(move VARCHAR(1), row_selection INT, col_selection INT)
BEGIN

DECLARE error_message VARCHAR(255);

    -- SQL Exception if move is not in 'X' or 'O'
    IF move NOT IN ('X', 'O') THEN
     SET error_message = 'move must be in X or O!';
        SIGNAL SQLSTATE '45000' SET MESSAGE_TEXT = error_message;
    
    -- SQL Exception if the wrong player went
    ELSEIF BINARY move <> BINARY @player_turn THEN
     SET error_message = CONCAT('It''s ', @player_turn, '''s turn!');
        SIGNAL SQLSTATE '45000' SET MESSAGE_TEXT = error_message;
    
    -- SQL Exception if a valid row number was not entered
    ELSEIF row_selection NOT IN (1, 2, 3) THEN
     SET error_message = 'row selection must be 1, 2, or 3!';
        SIGNAL SQLSTATE '45000' SET MESSAGE_TEXT = error_message;
    
    -- SQL Exception if a valid column number was not entered
    ELSEIF col_selection NOT IN (1, 2, 3) THEN
     SET error_message = 'column selection must be 1, 2, or 3!';
        SIGNAL SQLSTATE '45000' SET MESSAGE_TEXT = error_message;
    
    -- Check if the selected tile is already occupied by a previous turn
     ELSEIF (
        (row_selection = 1 AND col_selection = 1 AND (SELECT col_1 FROM tic_tac_toe_board WHERE row_num = 1) IS NOT NULL) OR
        (row_selection = 1 AND col_selection = 2 AND (SELECT col_2 FROM tic_tac_toe_board WHERE row_num = 1) IS NOT NULL) OR
        (row_selection = 1 AND col_selection = 3 AND (SELECT col_3 FROM tic_tac_toe_board WHERE row_num = 1) IS NOT NULL) OR
        (row_selection = 2 AND col_selection = 1 AND (SELECT col_1 FROM tic_tac_toe_board WHERE row_num = 2) IS NOT NULL) OR
        (row_selection = 2 AND col_selection = 2 AND (SELECT col_2 FROM tic_tac_toe_board WHERE row_num = 2) IS NOT NULL) OR
        (row_selection = 2 AND col_selection = 3 AND (SELECT col_3 FROM tic_tac_toe_board WHERE row_num = 2) IS NOT NULL) OR
        (row_selection = 3 AND col_selection = 1 AND (SELECT col_1 FROM tic_tac_toe_board WHERE row_num = 3) IS NOT NULL) OR
        (row_selection = 3 AND col_selection = 2 AND (SELECT col_2 FROM tic_tac_toe_board WHERE row_num = 3) IS NOT NULL) OR
        (row_selection = 3 AND col_selection = 3 AND (SELECT col_3 FROM tic_tac_toe_board WHERE row_num = 3) IS NOT NULL)
    ) THEN
        SET error_message = 'Selected tile is already occupied!';
        SIGNAL SQLSTATE '45000' SET MESSAGE_TEXT = error_message;
    
    -- If move is valid, update the tic tac toe board at the correct tile
    ELSE
        UPDATE tic_tac_toe_board SET 
         col_1 = CASE WHEN col_selection = 1 AND row_num = row_selection THEN move ELSE col_1 END,
     col_2 = CASE WHEN col_selection = 2 AND row_num = row_selection THEN move ELSE col_2 END,
     col_3 = CASE WHEN col_selection = 3 AND row_num = row_selection THEN move ELSE col_3 END;
        
        -- update the variable player_turn to the next player
        SET @player_turn = CASE
         WHEN @player_turn = 'X' THEN 'O'
            WHEN @player_turn = 'O' THEN 'X'
            END;
    END IF;
  
    -- check if this game caused a win/tie condition or if the game is still going
    CAll game_complete();
END //

DELIMITER ;

-- create a stored procedure that resets the board and player turn

DROP PROCEDURE IF EXISTS reset_tic_tac_toe;

DELIMITER //

CREATE PROCEDURE reset_tic_tac_toe()
BEGIN
 UPDATE tic_tac_toe_board 
    SET col_1 = NULL, col_2 = NULL, col_3 = NULL 
    WHERE row_num IN (1, 2, 3);
    SET @player_turn = 'X';
END //

DELIMITER ;

-- testing tic tac toe errors (feel free to comment out what you don't need as you test each error/game ending condition)
CALL player_move('Y', 1, 1); -- testing error when move is outside of X or O
CALL player_move('O', 1, 1); -- testing error when wrong player tries to go
CALL player_move('X', 4, 1); -- testing error when player tries a move with a row not between 1-3
CALL player_move('X', 1, 4); -- testing error when player tries a move with a column not between 1-3
CALL player_move('X', 1, 1); -- This line should execute fine, it is necessary to test for a move in an occupied tile next
CALL player_move('O', 1, 1); -- testing error when player tries to place in occupied tile (execute with line above)

-- testing tic tac toe game with winner
CALL reset_tic_tac_toe();
CALL player_move('X', 1, 1);
CALL player_move('O', 1, 2);
CALL player_move('X', 2, 1);
CALL player_move('O', 1, 3);
CALL player_move('X', 3, 1);

-- testing tic tac toe game with tie
CALL reset_tic_tac_toe();
CALL player_move('X', 1, 1);
CALL player_move('O', 1, 3);
CALL player_move('X', 1, 2);
CALL player_move('O', 2, 1);
CALL player_move('X', 2, 2);
CALL player_move('O', 3, 2);
CALL player_move('X', 2, 3);
CALL player_move('O', 3, 3);
CALL player_move('X', 3, 1);
